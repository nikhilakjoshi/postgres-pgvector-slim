#!/usr/bin/env python3
"""
Alembic migration generator for FastAPI Query Cache Module

This script creates an Alembic migration file that you can run in your FastAPI app
to set up the caching infrastructure including the view and cache table.

Usage:
    python create_cache_migration.py --revision-name "add_query_cache_system"
"""

import argparse
from datetime import datetime
import os


def create_migration_file(revision_name: str, output_dir: str = "alembic/versions"):
    """Create an Alembic migration file for the query cache system."""

    # Generate revision ID (12-character hex)
    import hashlib
    import random

    random.seed()
    revision_id = hashlib.md5(
        f"{revision_name}_{random.randint(1000, 9999)}".encode()
    ).hexdigest()[:12]

    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    migration_content = f'''"""Add query cache system with embeddings and view

Revision ID: {revision_id}
Revises: 
Create Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '{revision_id}'
down_revision: Union[str, None] = None  # Set this to your latest migration ID
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create query cache configuration table
    op.create_table(
        'query_cache_config',
        sa.Column('key', sa.String(length=50), nullable=False),
        sa.Column('value', sa.Text(), nullable=False),
        sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('created_by', sa.String(length=50), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_by', sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint('key'),
        schema='askwealth'
    )
    
    # Create query cache embeddings table
    op.create_table(
        'query_cache_embeddings',
        sa.Column('id', postgresql.UUID(), nullable=False),
        sa.Column('user_message_id', postgresql.UUID(), nullable=False),
        sa.Column('assistant_message_id', postgresql.UUID(), nullable=False),
        sa.Column('rephrased_query', sa.Text(), nullable=False),
        sa.Column('rephrased_query_embedding', postgresql.ARRAY(sa.Float()), nullable=True),
        sa.Column('cache_hits', sa.Integer(), nullable=False),
        sa.Column('last_accessed', sa.TIMESTAMP(), nullable=True),
        sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(['assistant_message_id'], ['askwealth.message.message_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_message_id'], ['askwealth.message.message_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_message_id', 'assistant_message_id'),
        schema='askwealth'
    )
    
    # Create indexes
    op.create_index('idx_query_cache_embeddings_user_msg', 'query_cache_embeddings', ['user_message_id'], schema='askwealth')
    op.create_index('idx_query_cache_embeddings_hits', 'query_cache_embeddings', ['cache_hits'], schema='askwealth')
    
    # Insert default configuration values
    op.execute("""
        INSERT INTO askwealth.query_cache_config (key, value, created_at, created_by, updated_at, updated_by) VALUES 
            ('similarity_threshold', '0.85', CURRENT_TIMESTAMP, 'migration', CURRENT_TIMESTAMP, 'migration'),
            ('cache_enabled', 'true', CURRENT_TIMESTAMP, 'migration', CURRENT_TIMESTAMP, 'migration'),
            ('max_cache_entries', '5000', CURRENT_TIMESTAMP, 'migration', CURRENT_TIMESTAMP, 'migration')
    """)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop indexes
    op.drop_index('idx_query_cache_embeddings_hits', table_name='query_cache_embeddings', schema='askwealth')
    op.drop_index('idx_query_cache_embeddings_user_msg', table_name='query_cache_embeddings', schema='askwealth')
    
    # Drop tables
    op.drop_table('query_cache_embeddings', schema='askwealth')
    op.drop_table('query_cache_config', schema='askwealth')
    
    # ### end Alembic commands ###
'''

    # Write migration file
    filename = (
        f"{revision_id}_{revision_name.replace(' ', '_').replace('-', '_').lower()}.py"
    )
    filepath = os.path.join(output_dir, filename)

    with open(filepath, "w") as f:
        f.write(migration_content)

    print(f"‚úÖ Created Alembic migration: {filepath}")
    print(f"üìã Revision ID: {revision_id}")
    print(f"üìù Description: Add query cache system with embeddings and view")
    print()
    print("Next steps:")
    print(f"1. Review the migration file: {filepath}")
    print("2. Update the 'down_revision' field to reference your latest migration")
    print("3. Run: alembic upgrade head")
    print("4. Integrate the cache_manager.py into your FastAPI app")
    print()
    print("üìñ See the integration guide: cache/fastapi-cache-integration-guide.md")

    return filepath


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Create Alembic migration for query cache system"
    )
    parser.add_argument(
        "--revision-name",
        default="add_query_cache_system",
        help="Name for the migration revision (default: add_query_cache_system)",
    )
    parser.add_argument(
        "--output-dir",
        default="alembic/versions",
        help="Output directory for migration file (default: alembic/versions)",
    )

    args = parser.parse_args()

    create_migration_file(args.revision_name, args.output_dir)
